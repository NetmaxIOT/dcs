@startuml

/' OpenDCS UML
 '
 ' Language: Vala
 '
 ' Because Vala uses public properties and can generate getters and setters
 ' using syntactic sugar any public property will be assumed to have an
 ' associated get/set. Other property cases will be documented.
 '
 ' If a class contains only properties and methods the separators will not be
 ' modified allowing plantuml to put each where they belong. In the case that
 ' the class contains signals and/or getters and setters it will use:
 '
 ' class Foo {
 '     int foo_prop
 '     -- signals --
 '     void foo_signal ()
 '     ---- ' force a blank line
 '     void foo_method ()
 '     .. get/set ..
 '     int get_foo_prop ()
 '     void set_foo_prop (int foo)
 ' }
 '/

title OpenDCS UML

' Control layout
left to right direction
'page 2x1

' Control output
!define SHOW_CONTENT
!define SHOW_ENUMS
!define SHOW_GLIB_ASSOC
!define SHOW_GTK_ASSOC

package "Dcs" #DDDDDD {

    top to bottom direction

    '
    ' Enumerations
    '
    !include core/enums.uml

    '
    ' Interfaces
    '

    interface Object {
        +{abstract} string id
        +virtual bool equal (Object a, Object b)
        +virtual int compare (Object a)
        +virtual string to_string ()
    }

    interface Buildable {
        #{abstract} string xml  ' need to deprecate these
        #{abstract} string xsd  '  "
        +{abstract} {static} Xml.Node* node
        +{static} unowned string get_xml_default ()
        +{static} unowned string get_xsd_default ()
        ~{abstract} void build_from_xml_node (Xml.Node* node)
    }

    interface CldAdapter {
        #{abstract} bool satisfied
        -- signals --
        +void request_object (string id)
        ----
        +{abstract} void offer_cld_object (Object object)
        +virtual async void nap (uint interval, int priority)
        #{abstract} async void request_data ()
    }

    !include core/config.uml

    interface Container {
        +{abstract} Gee.Map<string, Object> objects
        -- signals --
        +{abstract} void request_object (string id)
        ----
        +virtual void add_child (Object object)
        +virtual void remove_child (Object object)
        +virtual Object? get_object (string id)
        +virtual Gee.Map<string, Object> get_object_map (GLib.Type type)
        +virtual Gee.Map<string, Object> get_children (GLib.Type type)
        +virtual void sort_objects ()
        +virtual void print_objects (int depth)
    }

    interface Factory {
        -- signals --
        +void build_complete ()
        ----
        +{abstract} Gee.TreeMap<string, Object> make_object_map (Xml.Node* node)
        +{abstract} Object make_object (GLib.Type type) throws GLib.Error
        +{abstract} Object make_object_from_node (Xml.Node* node) throws GLib.Error
    }

    ' TODO Needs to be written still
    ' XXX What is a view supposed to do in an MVC?
    interface View {
        #Dcs.Model model
        #void connect (Dcs.ModelUpdateFunc model_func)
    }

    '
    ' Classes
    '

    !include core/abstract-config.uml
    !include core/config-node.uml

    abstract class Controller {
        #Dcs.Model model
        #Dcs.View view
        +bool admin
        -- signals --
        +void acquisition_state_changed (bool state)
        ----
        +Controller (Model, View)
        -~Controller ()
        +{abstract} void update_view ()
        +{abstract} void add (Object object, string path)
        +{abstract} void remove (string path)
        #void save_requested_cb ()
        +void start_acquisition ()
        +void stop_acquisition ()
        +void start_device_output ()
        +void stop_device_output ()
    }

    class DataSeries {
        +string ch_ref
        +Cld.Channel channel
        +int buffer_size
        +int stride
        +string id
        #string xml
        #string xsd
        #virtual Xml.Node* node
        #bool satisfied
        ~void build_from_xml_node
        +void offer_cld_object (Cld.Object object)
        #async void request_data ()
        +SimplePoint[] to_array ()
    }

    class DBusInterface {
        +const string SERVICE_NAME
        +const string OBJECT_PATH
        +{abstract} void shutdown () throws GLib.IOError
    }

    class Message {
        +Message()
        +Message.alert ()
        +Message.error ()
        +Message.info ()
        +Message.warning ()
        +{abstract} void pack ()
        +{abstract} void unpack ()
    }

    class Model {
        +string name
        +bool admin
        +bool def_enabled
        +Gee.Map<string, Object> objects
        +string config_filename
        +bool active
        +bool verbose
        ~ApplicationConfig config
        ~Cld.XmlConfig xml
        ~Cld.Context ctx
        ~GLib.Settings settings
        -- signals --
        +void log_state_changed (string log, bool state)
        +void updated ()
        ----
        +Model (string config_filename)
        +void update_objects (Gee.Map<string, Object> val)
        .. get/set ..
        +ApplicationConfig get_config ()
        +Cld.XmlConfig get_xml ()
        +Cld.Context get_ctx ()
        +GLib.Settings get_settings ()
    }

    class Point <<compact>> {
        +double x
        +double y
        +Point (double x, double y)
    }

    class SysLog {
        +{static} int verbosity
        +{static} unowned SysLog get_default ()
        +{static} void init (bool stdout, string? filename)
        +{static} void shutdown ()
        +{static} void increase_verbosity ()
    }

    /'
     'box Delegates {
     '    +void ModelUpdateFunc ()
     '}
     '/

    '
    ' Associations
    '

    AbstractConfig ..|> Config
    ConfigNode ..|> Config
    DataSeries ..|> Object
    DataSeries ..|> Buildable
    DataSeries ..|> CldAdapter
    Model ..|> Container

    !ifdef SHOW_GLIB_ASSOC
    AbstractConfig --|> GLib.Object
    Buildable --|> GLib.Object
    CldAdapter --|> GLib.Object
    Config --|> GLib.Object
    ConfigNode --|> GLib.Object
    Container --|> GLib.Object
    Controller --|> GLib.Object
    DataSeries --|> GLib.Object
    DBusInterface --|> GLib.Object
    Factory --|> GLib.Object
    Message --|> GLib.Object
    Model --|> GLib.Object
    Object --|> GLib.Object
    Point --|> GLib.Object
    SysLog --|> GLib.Object
    View --|> GLib.Object
    !endif

    '
    ' Notes
    '

    legend right
        OpenDCS is built using the Vala language which can use special syntax
        to define property getters and setters with scope that's different from
        the property itself. For instance:
            <i>public int value { get; private set; }</i>
        which will result in a public getter and a private setter. UML has no
        way of displaying this if so it should be implied that any property that
        is marked public (+) will also have a public get/set, and if a property
        should specify scope it will be marked as internal (~).
    end legend

    note top of SysLog: Bad name, planning on changing

    note top of Message
        This should probably be a compact class.
        Other namespaces will contain message classes
        as well that are more specific to the scope.
    end note

    package "UI" {

        '
        ' Enumerations
        '

        enum Orientation {
            HORIZONTAL,
            VERTICAL
        }

        enum PositionType {
            LEFT,
            RIGHT,
            TOP,
            BOTTOM
        }

        enum PolarAxisType {
            MAGNITUDE,
            ANGLE
        }

        enum ColorGradientType {
            RGB,
            HSV
        }

        '
        ' Interfaces
        '

        interface Widget {
            -- properties --
            +{abstract} bool fill
        }

        '
        ' Classes
        '

        abstract class Canvas {
            +virtual string id
        }

        abstract class SimpleWidget {
            +virtual string id
            +{abstract} string xml
            +{abstract} string xsd
            #virtual Xml.Node* node
            +bool fill
            +{abstract} void build_from_xml_node (Xml.Node* node)
            #{abstract} void update_node ()
        }

        abstract class CustomWidget {
            +virtual string id
            +{abstract} string xml
            +{abstract} string xsd
            #virtual Xml.Node* node
            +bool fill
            +{abstract} void build_from_xml_node (Xml.Node* node)
            #{abstract} void update_node ()
        }

        abstract class CompositeWidget {
            +virtual string id
            +{abstract} string xml
            +{abstract} string xsd
            #virtual Xml.Node* node
            +bool fill
            +{abstract} Gee.Map<string, Object> objects
            +{abstract} void build_from_xml_node (Xml.Node* node)
            #{abstract} void update_objects (Gee.Map<string, Object> val)
        }

        '
        ' Associations
        '

        Canvas ..|> Object
        SimpleWidget ..|> Widget
        SimpleWidget ..|> Buildable
        SimpleWidget ..|> Object
        CustomWidget ..|> Widget
        CustomWidget ..|> Buildable
        CustomWidget ..|> Object
        CompositeWidget ..|> Widget
        CompositeWidget ..|> Container
        CompositeWidget ..|> Buildable
        CompositeWidget ..|> Object

        !ifdef SHOW_GLIB_ASSOC
        Widget --|> GLib.Object
        !endif

        !ifdef SHOW_GTK_ASSOC
        Canvas --|> Gtk.DrawingArea
        SimpleWidget --|> Gtk.Box
        CustomWidget --|> Gtk.DrawingArea
        CompositeWidget --|> Gtk.Box
        !endif

        '
        ' Notes
        '

        note top of CompositeWidget
            This is just a simple widget that implements Container.
            Could probably just simplify it down to
            "Dcs.UI.CompositeWidget : Dcs.UI.SimpleWidget, Dcs.Container"
        end note
    }

    package "CLI" {

        '
        ' Enumerations
        '

        '
        ' Interfaces
        '

        '
        ' Classes
        '

        '
        ' Associations
        '

        '
        ' Notes
        '
    }

    package "Control" {

        '
        ' Enumerations
        '

        '
        ' Interfaces
        '

        '
        ' Classes
        '

        '
        ' Associations
        '

        '
        ' Notes
        '
    }

    package "DAQ" {

        '
        ' Enumerations
        '

        '
        ' Interfaces
        '

        interface Signal {
            -- properties --
            +string tag
            +string desc
            +string alias
        }

        '
        ' Classes
        '

        class Range {
            -- properties --
            +float min
            +float max
            -- methods --
            +float clamp (float value)
        }

        class AnalogInput {
            -- properties --
            +Range range
            +uint number
            +uint8 resolution
            ~uint raw
            ~float value
            -- methods --
            +void update_from_raw (uint raw)
            +void update (float value)
            -- get/set --
            +uint get_raw ()
            +float get_value ()
        }

        '
        ' Associations
        '

        '
        ' Notes
        '

        note top of Range
            Write as a compact class. Also, consider that this should be inside
            of the Dcs namespace and not within DAQ.
        end note

        note top of AnalogInput
            The method <i>update_from_raw</i> should throw an exception if no
            range or resolution have been configured. Should also consider that
            only one update method exists and expects raw, and just use the
            value setter for updating the floating point value.
        end note
    }

    package "Log" {

        '
        ' Enumerations
        '

        '
        ' Interfaces
        '

        '
        ' Classes
        '

        '
        ' Associations
        '

        '
        ' Notes
        '
    }

    package "Net" {

        '
        ' Enumerations
        '

        '
        ' Interfaces
        '

        '
        ' Classes
        '

        '
        ' Associations
        '

        '
        ' Notes
        '
    }
}

@enduml
